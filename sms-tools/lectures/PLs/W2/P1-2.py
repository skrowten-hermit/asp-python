import matplotlib.pyplot as plt1
import matplotlib.pyplot as plt2
import numpy as np
import threading

"""
P1-2: Plotting complex sinusoids

Complex (discrete) sinewaves are the ones that appear in the DFT. They don't have any time information.
It has a time index "n" and the frequency is an integer value "N". So these complex sine waves are
always periodic for a given "N". So we define "N" which is going to be the size of the DFT. Then, these
complex sines always have a fixed number of periods within that "N" and this depends on "k". So, in
fact, "k" is the number of periods within that "N".

"""


# A complex sine wave cannot be represented in 2D figures. Hence we can choose to display the real part
# or the imaginary part of sinusoid s. The x-axis will have the indices and the y-axis will have the 
# amplitude. The real part will display a cosine wave and the imaginary part will display a sine wave.

def plotSine(p, roi):
    if roi == 1:
        label = "real"
        ptype = np.real(s)
    else:
        label = "imaginary"
        ptype = np.imag(s)
    p.plot(n, ptype)
    p.axis([-N/2, N/2, -1, 1])
    p.xlabel("n")
    p.ylabel("amplitude (" + label + ")")
    p.show()


# "N" is an integer that defines the length of the array (or the DFT size) thats generated by the arange
# function. The time indices (array "n") are going to be created using arange. Reducing "N" will result 
# in fewer samples and the plot might get jagged.

N = 500
k = 3
n = np.arange(-N/2, N/2)
s = np.exp(1j * 2 * np.pi * k * n / N)

t1 = threading.Thread(target=plotSine, args=(plt1, 1))
t2 = threading.Thread(target=plotSine, args=(plt2, 2))
t1.start()
t2.start()
t1.join()
t2.join()

